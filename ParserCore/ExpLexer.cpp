
#line 3 "ExpLexer.cpp"

#define  EXP_YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define EXP_YY_FLEX_MAJOR_VERSION 2
#define EXP_YY_FLEX_MINOR_VERSION 5
#define EXP_YY_FLEX_SUBMINOR_VERSION 35
#if EXP_YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN

#endif
#ifndef INT16_MIN

#endif
#ifndef INT32_MIN

#endif
#ifndef INT8_MAX

#endif
#ifndef INT16_MAX

#endif
#ifndef INT32_MAX

#endif
#ifndef UINT8_MAX

#endif
#ifndef UINT16_MAX

#endif
#ifndef UINT32_MAX

#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define EXP_YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define EXP_YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef EXP_YY_USE_CONST
#define exp_yyconst const
#else
#define exp_yyconst
#endif

/* Returned upon end-of-file. */
#define EXP_YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define EXP_YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (exp_yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The EXP_YYSTATE alias is for lex
 * compatibility.
 */
#define EXP_YY_START (((exp_yy_start) - 1) / 2)
#define EXP_YYSTATE EXP_YY_START

/* Action number for EOF rule of a given start state. */
#define EXP_YY_STATE_EOF(state) (EXP_YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define EXP_YY_NEW_FILE exp_yyrestart(exp_yyin  )

#define EXP_YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef EXP_YY_BUF_SIZE
#define EXP_YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define EXP_YY_STATE_BUF_SIZE   ((EXP_YY_BUF_SIZE + 2) * sizeof(exp_yy_state_type))

#ifndef EXP_YY_TYPEDEF_EXP_YY_BUFFER_STATE
#define EXP_YY_TYPEDEF_EXP_YY_BUFFER_STATE
typedef struct exp_yy_buffer_state *EXP_YY_BUFFER_STATE;
#endif

extern int exp_yyleng;

extern FILE *exp_yyin, *exp_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define EXP_YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define exp_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up exp_yytext. */ \
        int exp_yyless_macro_arg = (n); \
        EXP_YY_LESS_LINENO(exp_yyless_macro_arg);\
		*exp_yy_cp = (exp_yy_hold_char); \
		EXP_YY_RESTORE_EXP_YY_MORE_OFFSET \
		(exp_yy_c_buf_p) = exp_yy_cp = exp_yy_bp + exp_yyless_macro_arg - EXP_YY_MORE_ADJ; \
		EXP_YY_DO_BEFORE_ACTION; /* set up exp_yytext again */ \
		} \
	while ( 0 )

#define unput(c) exp_yyunput( c, (exp_yytext_ptr)  )

#ifndef EXP_YY_TYPEDEF_EXP_YY_SIZE_T
#define EXP_YY_TYPEDEF_EXP_YY_SIZE_T
typedef size_t exp_yy_size_t;
#endif

#ifndef EXP_YY_STRUCT_EXP_YY_BUFFER_STATE
#define EXP_YY_STRUCT_EXP_YY_BUFFER_STATE
struct exp_yy_buffer_state
	{
	FILE *exp_yy_input_file;

	char *exp_yy_ch_buf;		/* input buffer */
	char *exp_yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	exp_yy_size_t exp_yy_buf_size;

	/* Number of characters read into exp_yy_ch_buf, not including EOB
	 * characters.
	 */
	int exp_yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int exp_yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int exp_yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int exp_yy_at_bol;

    int exp_yy_bs_lineno; /**< The line count. */
    int exp_yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int exp_yy_fill_buffer;

	int exp_yy_buffer_status;

#define EXP_YY_BUFFER_NEW 0
#define EXP_YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as EXP_YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via exp_yyrestart()), so that the user can continue scanning by
	 * just pointing exp_yyin at a new input file.
	 */
#define EXP_YY_BUFFER_EOF_PENDING 2

	};
#endif /* !EXP_YY_STRUCT_EXP_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t exp_yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t exp_yy_buffer_stack_max = 0; /**< capacity of stack. */
static EXP_YY_BUFFER_STATE * exp_yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define EXP_YY_CURRENT_BUFFER ( (exp_yy_buffer_stack) \
                          ? (exp_yy_buffer_stack)[(exp_yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define EXP_YY_CURRENT_BUFFER_LVALUE (exp_yy_buffer_stack)[(exp_yy_buffer_stack_top)]

/* exp_yy_hold_char holds the character lost when exp_yytext is formed. */
static char exp_yy_hold_char;
static int exp_yy_n_chars;		/* number of characters read into exp_yy_ch_buf */
int exp_yyleng;

/* Points to current character in buffer. */
static char *exp_yy_c_buf_p = (char *) 0;
static int exp_yy_init = 0;		/* whether we need to initialize */
static int exp_yy_start = 0;	/* start state number */

/* Flag which is used to allow exp_yywrap()'s to do buffer switches
 * instead of setting up a fresh exp_yyin.  A bit of a hack ...
 */
static int exp_yy_did_buffer_switch_on_eof;

void exp_yyrestart (FILE *input_file  );
void exp_yy_switch_to_buffer (EXP_YY_BUFFER_STATE new_buffer  );
EXP_YY_BUFFER_STATE exp_yy_create_buffer (FILE *file,int size  );
void exp_yy_delete_buffer (EXP_YY_BUFFER_STATE b  );
void exp_yy_flush_buffer (EXP_YY_BUFFER_STATE b  );
void exp_yypush_buffer_state (EXP_YY_BUFFER_STATE new_buffer  );
void exp_yypop_buffer_state (void );

static void exp_yyensure_buffer_stack (void );
static void exp_yy_load_buffer_state (void );
static void exp_yy_init_buffer (EXP_YY_BUFFER_STATE b,FILE *file  );

#define EXP_YY_FLUSH_BUFFER exp_yy_flush_buffer(EXP_YY_CURRENT_BUFFER )

EXP_YY_BUFFER_STATE exp_yy_scan_buffer (char *base,exp_yy_size_t size  );
EXP_YY_BUFFER_STATE exp_yy_scan_string (exp_yyconst char *exp_yy_str  );
EXP_YY_BUFFER_STATE exp_yy_scan_bytes (exp_yyconst char *bytes,int len  );

void *exp_yyalloc (exp_yy_size_t  );
void *exp_yyrealloc (void *,exp_yy_size_t  );
void exp_yyfree (void *  );

#define exp_yy_new_buffer exp_yy_create_buffer

#define exp_yy_set_interactive(is_interactive) \
	{ \
	if ( ! EXP_YY_CURRENT_BUFFER ){ \
        exp_yyensure_buffer_stack (); \
		EXP_YY_CURRENT_BUFFER_LVALUE =    \
            exp_yy_create_buffer(exp_yyin,EXP_YY_BUF_SIZE ); \
	} \
	EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_is_interactive = is_interactive; \
	}

#define exp_yy_set_bol(at_bol) \
	{ \
	if ( ! EXP_YY_CURRENT_BUFFER ){\
        exp_yyensure_buffer_stack (); \
		EXP_YY_CURRENT_BUFFER_LVALUE =    \
            exp_yy_create_buffer(exp_yyin,EXP_YY_BUF_SIZE ); \
	} \
	EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_at_bol = at_bol; \
	}

#define EXP_YY_AT_BOL() (EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_at_bol)

/* Begin user sect3 */

typedef unsigned char EXP_YY_CHAR;

FILE *exp_yyin = (FILE *) 0, *exp_yyout = (FILE *) 0;

typedef int exp_yy_state_type;

extern int exp_yylineno;

int exp_yylineno = 1;

extern char *exp_yytext;
#define exp_yytext_ptr exp_yytext

static exp_yy_state_type exp_yy_get_previous_state (void );
static exp_yy_state_type exp_yy_try_NUL_trans (exp_yy_state_type current_state  );
static int exp_yy_get_next_buffer (void );
static void exp_yy_fatal_error (exp_yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up exp_yytext.
 */
#define EXP_YY_DO_BEFORE_ACTION \
	(exp_yytext_ptr) = exp_yy_bp; \
	exp_yyleng = (size_t) (exp_yy_cp - exp_yy_bp); \
	(exp_yy_hold_char) = *exp_yy_cp; \
	*exp_yy_cp = '\0'; \
	(exp_yy_c_buf_p) = exp_yy_cp;

#define EXP_YY_NUM_RULES 17
#define EXP_YY_END_OF_BUFFER 18
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct exp_yy_trans_info
	{
	flex_int32_t exp_yy_verify;
	flex_int32_t exp_yy_nxt;
	};
static exp_yyconst flex_int16_t exp_yy_accept[45] =
    {   0,
        0,    0,   18,   17,    9,   10,   17,   11,   16,   16,
       16,   16,   16,   16,   16,   14,   15,   11,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    5,    8,    7,    4,    6,    0,   12,    0,   13,
        2,    1,    3,    0
    } ;

static exp_yyconst flex_int32_t exp_yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    3,    3,    3,    3,    1,    3,
        3,    3,    4,    1,    4,    5,    3,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    3,    3,    1,
        3,    1,    3,    3,    7,    7,    7,    7,    8,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        3,    1,    3,    3,    1,    1,    9,    7,   10,   11,

       12,    7,   13,    7,   14,    7,    7,    7,    7,   15,
       16,    7,    7,   17,   18,   19,    7,    7,    7,    7,
        7,    7,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static exp_yyconst flex_int32_t exp_yy_meta[20] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    2,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1
    } ;

static exp_yyconst flex_int16_t exp_yy_base[47] =
    {   0,
        0,    0,   56,   57,   57,   57,   49,   15,   57,   12,
       38,   41,   43,   37,   41,   43,   42,   18,   31,   32,
       36,   26,   30,   31,   26,   25,   21,   22,   21,   23,
       22,   57,   57,   57,   57,   57,   30,   29,   28,   27,
       57,   57,   57,   57,   30,   27
    } ;

static exp_yyconst flex_int16_t exp_yy_def[47] =
    {   0,
       44,    1,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   45,   46,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,    0,   44,   44
    } ;

static exp_yyconst flex_int16_t exp_yy_nxt[77] =
    {   0,
        4,    5,    6,    6,    7,    8,    9,    9,   10,   11,
       12,    9,    9,    9,    9,    9,   13,   14,   15,   17,
       18,   19,   17,   18,   37,   39,   38,   40,   28,   20,
       21,   27,   40,   40,   38,   38,   43,   42,   41,   36,
       35,   34,   33,   32,   31,   30,   29,   16,   16,   26,
       25,   24,   23,   22,   16,   44,    3,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44
    } ;

static exp_yyconst flex_int16_t exp_yy_chk[77] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    8,
        8,   10,   18,   18,   27,   28,   27,   28,   46,   10,
       10,   45,   40,   39,   38,   37,   31,   30,   29,   26,
       25,   24,   23,   22,   21,   20,   19,   17,   16,   15,
       14,   13,   12,   11,    7,    3,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44
    } ;

static exp_yy_state_type exp_yy_last_accepting_state;
static char *exp_yy_last_accepting_cpos;

extern int exp_yy_flex_debug;
int exp_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define exp_yymore() exp_yymore_used_but_not_detected
#define EXP_YY_MORE_ADJ 0
#define EXP_YY_RESTORE_EXP_YY_MORE_OFFSET
char *exp_yytext;

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// NOTE: This source file is was generated by cygwin's flex.exe
//   i.e. flex -L -oCmdLexer.cpp CmdLexer.l
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#include "stdafx.h"
#include <io.h>
#include <string>

#include "ExpParser.h"

extern char* m_expression;

// Otherwise the lexer is file-based.
#define EXP_YY_ALWAYS_INTERACTIVE 1

// We *must* override the EXP_YY_INPUT macro. Otherwise, the lexer
// thinks the input is coming from stdin.
#define EXP_YY_INPUT(buf,result,max_size) \
	if ( true ) \
	{ \
		(*buf) = (*m_expression); \
		++m_expression; \
		if ((*buf) == '\0') \
			(*buf) = (char) EOF; \
		result = (((*buf) != EOF) ? 1 : 0); \
	} \
	else \
	{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, exp_yyin))==0 && ferror(exp_yyin)) \
		{ \
			if( errno != EINTR) \
			{ \
				EXP_YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
			} \
			errno=0; \
			clearerr(exp_yyin); \
		} \
	}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

#define INITIAL 0

#ifndef EXP_YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
// #include <unistd.h>
#endif

#ifndef EXP_YY_EXTRA_TYPE
#define EXP_YY_EXTRA_TYPE void *
#endif

static int exp_yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int exp_yylex_destroy (void );

int exp_yyget_debug (void );

void exp_yyset_debug (int debug_flag  );

EXP_YY_EXTRA_TYPE exp_yyget_extra (void );

void exp_yyset_extra (EXP_YY_EXTRA_TYPE user_defined  );

FILE *exp_yyget_in (void );

void exp_yyset_in  (FILE * in_str  );

FILE *exp_yyget_out (void );

void exp_yyset_out  (FILE * out_str  );

int exp_yyget_leng (void );

char *exp_yyget_text (void );

int exp_yyget_lineno (void );

void exp_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef EXP_YY_SKIP_EXP_YYWRAP
#ifdef __cplusplus
extern "C" int exp_yywrap (void );
#else
extern int exp_yywrap (void );
#endif
#endif

    static void exp_yyunput (int c,char *buf_ptr  );
    
#ifndef exp_yytext_ptr
static void exp_yy_flex_strncpy (char *,exp_yyconst char *,int );
#endif

#ifdef EXP_YY_NEED_STRLEN
static int exp_yy_flex_strlen (exp_yyconst char * );
#endif

#ifndef EXP_YY_NO_INPUT

#ifdef __cplusplus
static int exp_yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef EXP_YY_READ_BUF_SIZE
#define EXP_YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( exp_yytext, exp_yyleng, 1, exp_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or EXP_YY_NULL,
 * is returned in "result".
 */
#ifndef EXP_YY_INPUT
#define EXP_YY_INPUT(buf,result,max_size) \
	if ( EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( exp_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( exp_yyin ) ) \
			EXP_YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, exp_yyin))==0 && ferror(exp_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				EXP_YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(exp_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "exp_yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef exp_yyterminate
#define exp_yyterminate() return EXP_YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef EXP_YY_START_STACK_INCR
#define EXP_YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef EXP_YY_FATAL_ERROR
#define EXP_YY_FATAL_ERROR(msg) exp_yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef EXP_YY_DECL
#define EXP_YY_DECL_IS_OURS 1

extern int exp_yylex (void);

#define EXP_YY_DECL int exp_yylex (void)
#endif /* !EXP_YY_DECL */

/* Code executed at the beginning of each rule, after exp_yytext and exp_yyleng
 * have been set up.
 */
#ifndef EXP_YY_USER_ACTION
#define EXP_YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef EXP_YY_BREAK
#define EXP_YY_BREAK break;
#endif

#define EXP_YY_RULE_SETUP \
	EXP_YY_USER_ACTION

/** The main scanner function which does all the work.
 */
EXP_YY_DECL
{
	register exp_yy_state_type exp_yy_current_state;
	register char *exp_yy_cp, *exp_yy_bp;
	register int exp_yy_act;
    
	if ( !(exp_yy_init) )
		{
		(exp_yy_init) = 1;

#ifdef EXP_YY_USER_INIT
		EXP_YY_USER_INIT;
#endif

		if ( ! (exp_yy_start) )
			(exp_yy_start) = 1;	/* first start state */

		if ( ! exp_yyin )
			exp_yyin = stdin;

		if ( ! exp_yyout )
			exp_yyout = stdout;

		if ( ! EXP_YY_CURRENT_BUFFER ) {
			exp_yyensure_buffer_stack ();
			EXP_YY_CURRENT_BUFFER_LVALUE =
				exp_yy_create_buffer(exp_yyin,EXP_YY_BUF_SIZE );
		}

		exp_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		exp_yy_cp = (exp_yy_c_buf_p);

		/* Support of exp_yytext. */
		*exp_yy_cp = (exp_yy_hold_char);

		/* exp_yy_bp points to the position in exp_yy_ch_buf of the start of
		 * the current run.
		 */
		exp_yy_bp = exp_yy_cp;

		exp_yy_current_state = (exp_yy_start);
exp_yy_match:
		do
			{
			register EXP_YY_CHAR exp_yy_c = exp_yy_ec[EXP_YY_SC_TO_UI(*exp_yy_cp)];
			if ( exp_yy_accept[exp_yy_current_state] )
				{
				(exp_yy_last_accepting_state) = exp_yy_current_state;
				(exp_yy_last_accepting_cpos) = exp_yy_cp;
				}
			while ( exp_yy_chk[exp_yy_base[exp_yy_current_state] + exp_yy_c] != exp_yy_current_state )
				{
				exp_yy_current_state = (int) exp_yy_def[exp_yy_current_state];
				if ( exp_yy_current_state >= 45 )
					exp_yy_c = exp_yy_meta[(unsigned int) exp_yy_c];
				}
			exp_yy_current_state = exp_yy_nxt[exp_yy_base[exp_yy_current_state] + (unsigned int) exp_yy_c];
			++exp_yy_cp;
			}
		while ( exp_yy_base[exp_yy_current_state] != 57 );

exp_yy_find_action:
		exp_yy_act = exp_yy_accept[exp_yy_current_state];
		if ( exp_yy_act == 0 )
			{ /* have to back up */
			exp_yy_cp = (exp_yy_last_accepting_cpos);
			exp_yy_current_state = (exp_yy_last_accepting_state);
			exp_yy_act = exp_yy_accept[exp_yy_current_state];
			}

		EXP_YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( exp_yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of EXP_YY_DO_BEFORE_ACTION */
			*exp_yy_cp = (exp_yy_hold_char);
			exp_yy_cp = (exp_yy_last_accepting_cpos);
			exp_yy_current_state = (exp_yy_last_accepting_state);
			goto exp_yy_find_action;

case 1:
EXP_YY_RULE_SETUP
{ return OP_ASIN; }
	EXP_YY_BREAK
case 2:
EXP_YY_RULE_SETUP
{ return OP_ACOS; }
	EXP_YY_BREAK
case 3:
EXP_YY_RULE_SETUP
{ return OP_ATAN; }
	EXP_YY_BREAK
case 4:
EXP_YY_RULE_SETUP
{ return OP_SIN; }
	EXP_YY_BREAK
case 5:
EXP_YY_RULE_SETUP
{ return OP_COS; }
	EXP_YY_BREAK
case 6:
EXP_YY_RULE_SETUP
{ return OP_TAN; }
	EXP_YY_BREAK
case 7:
EXP_YY_RULE_SETUP
{ return OP_RAD; }
	EXP_YY_BREAK
case 8:
EXP_YY_RULE_SETUP
{ return OP_DEG; }
	EXP_YY_BREAK
case 9:
EXP_YY_RULE_SETUP
;
	EXP_YY_BREAK
case 10:
EXP_YY_RULE_SETUP
{ return exp_yytext[0]; }
	EXP_YY_BREAK
case 11:
EXP_YY_RULE_SETUP
{ exp_yylval.token.coeff = atoi(exp_yytext); return NUMBER; }
	EXP_YY_BREAK
case 12:
EXP_YY_RULE_SETUP
{ exp_yylval.token.coeff = std::stod(exp_yytext); return NUMBER; }
	EXP_YY_BREAK
case 13:
EXP_YY_RULE_SETUP
{ exp_yylval.token.coeff = std::stod(exp_yytext); return NUMBER; }
	EXP_YY_BREAK
case 14:
EXP_YY_RULE_SETUP
{ exp_yylval.token.coeff = std::stod(exp_yytext); return NUMBER; }
	EXP_YY_BREAK
case 15:
EXP_YY_RULE_SETUP
{ exp_yylval.token.coeff = std::stod(exp_yytext); return NUMBER; }
	EXP_YY_BREAK
case 16:
EXP_YY_RULE_SETUP
{ exp_yylval.token.coeff = 1.0; return VAR; }
	EXP_YY_BREAK
case 17:
EXP_YY_RULE_SETUP
ECHO;
	EXP_YY_BREAK
case EXP_YY_STATE_EOF(INITIAL):
	exp_yyterminate();

	case EXP_YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int exp_yy_amount_of_matched_text = (int) (exp_yy_cp - (exp_yytext_ptr)) - 1;

		/* Undo the effects of EXP_YY_DO_BEFORE_ACTION. */
		*exp_yy_cp = (exp_yy_hold_char);
		EXP_YY_RESTORE_EXP_YY_MORE_OFFSET

		if ( EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buffer_status == EXP_YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed exp_yyin at a new source and called
			 * exp_yylex().  If so, then we have to assure
			 * consistency between EXP_YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(exp_yy_n_chars) = EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_n_chars;
			EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_input_file = exp_yyin;
			EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buffer_status = EXP_YY_BUFFER_NORMAL;
			}

		/* Note that here we test for exp_yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since exp_yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (exp_yy_c_buf_p) <= &EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[(exp_yy_n_chars)] )
			{ /* This was really a NUL. */
			exp_yy_state_type exp_yy_next_state;

			(exp_yy_c_buf_p) = (exp_yytext_ptr) + exp_yy_amount_of_matched_text;

			exp_yy_current_state = exp_yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * exp_yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			exp_yy_next_state = exp_yy_try_NUL_trans( exp_yy_current_state );

			exp_yy_bp = (exp_yytext_ptr) + EXP_YY_MORE_ADJ;

			if ( exp_yy_next_state )
				{
				/* Consume the NUL. */
				exp_yy_cp = ++(exp_yy_c_buf_p);
				exp_yy_current_state = exp_yy_next_state;
				goto exp_yy_match;
				}

			else
				{
				exp_yy_cp = (exp_yy_c_buf_p);
				goto exp_yy_find_action;
				}
			}

		else switch ( exp_yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(exp_yy_did_buffer_switch_on_eof) = 0;

				if ( exp_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * exp_yy_get_next_buffer() to have set up
					 * exp_yytext, we can now set up
					 * exp_yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * EXP_YY_NULL, it'll still work - another
					 * EXP_YY_NULL will get returned.
					 */
					(exp_yy_c_buf_p) = (exp_yytext_ptr) + EXP_YY_MORE_ADJ;

					exp_yy_act = EXP_YY_STATE_EOF(EXP_YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (exp_yy_did_buffer_switch_on_eof) )
						EXP_YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(exp_yy_c_buf_p) =
					(exp_yytext_ptr) + exp_yy_amount_of_matched_text;

				exp_yy_current_state = exp_yy_get_previous_state(  );

				exp_yy_cp = (exp_yy_c_buf_p);
				exp_yy_bp = (exp_yytext_ptr) + EXP_YY_MORE_ADJ;
				goto exp_yy_match;

			case EOB_ACT_LAST_MATCH:
				(exp_yy_c_buf_p) =
				&EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[(exp_yy_n_chars)];

				exp_yy_current_state = exp_yy_get_previous_state(  );

				exp_yy_cp = (exp_yy_c_buf_p);
				exp_yy_bp = (exp_yytext_ptr) + EXP_YY_MORE_ADJ;
				goto exp_yy_find_action;
			}
		break;
		}

	default:
		EXP_YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of exp_yylex */

/* exp_yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int exp_yy_get_next_buffer (void)
{
    	register char *dest = EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf;
	register char *source = (exp_yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (exp_yy_c_buf_p) > &EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[(exp_yy_n_chars) + 1] )
		EXP_YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (exp_yy_c_buf_p) - (exp_yytext_ptr) - EXP_YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((exp_yy_c_buf_p) - (exp_yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buffer_status == EXP_YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_n_chars = (exp_yy_n_chars) = 0;

	else
		{
			int num_to_read =
			EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			EXP_YY_BUFFER_STATE b = EXP_YY_CURRENT_BUFFER;

			int exp_yy_c_buf_p_offset =
				(int) ((exp_yy_c_buf_p) - b->exp_yy_ch_buf);

			if ( b->exp_yy_is_our_buffer )
				{
				int new_size = b->exp_yy_buf_size * 2;

				if ( new_size <= 0 )
					b->exp_yy_buf_size += b->exp_yy_buf_size / 8;
				else
					b->exp_yy_buf_size *= 2;

				b->exp_yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					exp_yyrealloc((void *) b->exp_yy_ch_buf,b->exp_yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->exp_yy_ch_buf = 0;

			if ( ! b->exp_yy_ch_buf )
				EXP_YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(exp_yy_c_buf_p) = &b->exp_yy_ch_buf[exp_yy_c_buf_p_offset];

			num_to_read = EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > EXP_YY_READ_BUF_SIZE )
			num_to_read = EXP_YY_READ_BUF_SIZE;

		/* Read in more data. */
		EXP_YY_INPUT( (&EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[number_to_move]),
			(exp_yy_n_chars), (size_t) num_to_read );

		EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_n_chars = (exp_yy_n_chars);
		}

	if ( (exp_yy_n_chars) == 0 )
		{
		if ( number_to_move == EXP_YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			exp_yyrestart(exp_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buffer_status =
				EXP_YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((exp_yy_size_t) ((exp_yy_n_chars) + number_to_move) > EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		exp_yy_size_t new_size = (exp_yy_n_chars) + number_to_move + ((exp_yy_n_chars) >> 1);
		EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf = (char *) exp_yyrealloc((void *) EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf,new_size  );
		if ( ! EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf )
			EXP_YY_FATAL_ERROR( "out of dynamic memory in exp_yy_get_next_buffer()" );
	}

	(exp_yy_n_chars) += number_to_move;
	EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[(exp_yy_n_chars)] = EXP_YY_END_OF_BUFFER_CHAR;
	EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[(exp_yy_n_chars) + 1] = EXP_YY_END_OF_BUFFER_CHAR;

	(exp_yytext_ptr) = &EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[0];

	return ret_val;
}

/* exp_yy_get_previous_state - get the state just before the EOB char was reached */

    static exp_yy_state_type exp_yy_get_previous_state (void)
{
	register exp_yy_state_type exp_yy_current_state;
	register char *exp_yy_cp;
    
	exp_yy_current_state = (exp_yy_start);

	for ( exp_yy_cp = (exp_yytext_ptr) + EXP_YY_MORE_ADJ; exp_yy_cp < (exp_yy_c_buf_p); ++exp_yy_cp )
		{
		register EXP_YY_CHAR exp_yy_c = (*exp_yy_cp ? exp_yy_ec[EXP_YY_SC_TO_UI(*exp_yy_cp)] : 1);
		if ( exp_yy_accept[exp_yy_current_state] )
			{
			(exp_yy_last_accepting_state) = exp_yy_current_state;
			(exp_yy_last_accepting_cpos) = exp_yy_cp;
			}
		while ( exp_yy_chk[exp_yy_base[exp_yy_current_state] + exp_yy_c] != exp_yy_current_state )
			{
			exp_yy_current_state = (int) exp_yy_def[exp_yy_current_state];
			if ( exp_yy_current_state >= 45 )
				exp_yy_c = exp_yy_meta[(unsigned int) exp_yy_c];
			}
		exp_yy_current_state = exp_yy_nxt[exp_yy_base[exp_yy_current_state] + (unsigned int) exp_yy_c];
		}

	return exp_yy_current_state;
}

/* exp_yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = exp_yy_try_NUL_trans( current_state );
 */
    static exp_yy_state_type exp_yy_try_NUL_trans  (exp_yy_state_type exp_yy_current_state )
{
	register int exp_yy_is_jam;
    	register char *exp_yy_cp = (exp_yy_c_buf_p);

	register EXP_YY_CHAR exp_yy_c = 1;
	if ( exp_yy_accept[exp_yy_current_state] )
		{
		(exp_yy_last_accepting_state) = exp_yy_current_state;
		(exp_yy_last_accepting_cpos) = exp_yy_cp;
		}
	while ( exp_yy_chk[exp_yy_base[exp_yy_current_state] + exp_yy_c] != exp_yy_current_state )
		{
		exp_yy_current_state = (int) exp_yy_def[exp_yy_current_state];
		if ( exp_yy_current_state >= 45 )
			exp_yy_c = exp_yy_meta[(unsigned int) exp_yy_c];
		}
	exp_yy_current_state = exp_yy_nxt[exp_yy_base[exp_yy_current_state] + (unsigned int) exp_yy_c];
	exp_yy_is_jam = (exp_yy_current_state == 44);

	return exp_yy_is_jam ? 0 : exp_yy_current_state;
}

    static void exp_yyunput (int c, register char * exp_yy_bp )
{
	register char *exp_yy_cp;
    
    exp_yy_cp = (exp_yy_c_buf_p);

	/* undo effects of setting up exp_yytext */
	*exp_yy_cp = (exp_yy_hold_char);

	if ( exp_yy_cp < EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (exp_yy_n_chars) + 2;
		register char *dest = &EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[
					EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buf_size + 2];
		register char *source =
				&EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[number_to_move];

		while ( source > EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf )
			*--dest = *--source;

		exp_yy_cp += (int) (dest - source);
		exp_yy_bp += (int) (dest - source);
		EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_n_chars =
			(exp_yy_n_chars) = EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buf_size;

		if ( exp_yy_cp < EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf + 2 )
			EXP_YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--exp_yy_cp = (char) c;

	(exp_yytext_ptr) = exp_yy_bp;
	(exp_yy_hold_char) = *exp_yy_cp;
	(exp_yy_c_buf_p) = exp_yy_cp;
}

#ifndef EXP_YY_NO_INPUT
#ifdef __cplusplus
    static int exp_yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(exp_yy_c_buf_p) = (exp_yy_hold_char);

	if ( *(exp_yy_c_buf_p) == EXP_YY_END_OF_BUFFER_CHAR )
		{
		/* exp_yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (exp_yy_c_buf_p) < &EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_ch_buf[(exp_yy_n_chars)] )
			/* This was really a NUL. */
			*(exp_yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (exp_yy_c_buf_p) - (exp_yytext_ptr);
			++(exp_yy_c_buf_p);

			switch ( exp_yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because exp_yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					exp_yyrestart(exp_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( exp_yywrap( ) )
						return EOF;

					if ( ! (exp_yy_did_buffer_switch_on_eof) )
						EXP_YY_NEW_FILE;
#ifdef __cplusplus
					return exp_yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(exp_yy_c_buf_p) = (exp_yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (exp_yy_c_buf_p);	/* cast for 8-bit char's */
	*(exp_yy_c_buf_p) = '\0';	/* preserve exp_yytext */
	(exp_yy_hold_char) = *++(exp_yy_c_buf_p);

	return c;
}
#endif	/* ifndef EXP_YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void exp_yyrestart  (FILE * input_file )
{
    
	if ( ! EXP_YY_CURRENT_BUFFER ){
        exp_yyensure_buffer_stack ();
		EXP_YY_CURRENT_BUFFER_LVALUE =
            exp_yy_create_buffer(exp_yyin,EXP_YY_BUF_SIZE );
	}

	exp_yy_init_buffer(EXP_YY_CURRENT_BUFFER,input_file );
	exp_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void exp_yy_switch_to_buffer  (EXP_YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		exp_yypop_buffer_state();
	 *		exp_yypush_buffer_state(new_buffer);
     */
	exp_yyensure_buffer_stack ();
	if ( EXP_YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( EXP_YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(exp_yy_c_buf_p) = (exp_yy_hold_char);
		EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buf_pos = (exp_yy_c_buf_p);
		EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_n_chars = (exp_yy_n_chars);
		}

	EXP_YY_CURRENT_BUFFER_LVALUE = new_buffer;
	exp_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (exp_yywrap()) processing, but the only time this flag
	 * is looked at is after exp_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(exp_yy_did_buffer_switch_on_eof) = 1;
}

static void exp_yy_load_buffer_state  (void)
{
    	(exp_yy_n_chars) = EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_n_chars;
	(exp_yytext_ptr) = (exp_yy_c_buf_p) = EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buf_pos;
	exp_yyin = EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_input_file;
	(exp_yy_hold_char) = *(exp_yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c EXP_YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    EXP_YY_BUFFER_STATE exp_yy_create_buffer  (FILE * file, int  size )
{
	EXP_YY_BUFFER_STATE b;
    
	b = (EXP_YY_BUFFER_STATE) exp_yyalloc(sizeof( struct exp_yy_buffer_state )  );
	if ( ! b )
		EXP_YY_FATAL_ERROR( "out of dynamic memory in exp_yy_create_buffer()" );

	b->exp_yy_buf_size = size;

	/* exp_yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->exp_yy_ch_buf = (char *) exp_yyalloc(b->exp_yy_buf_size + 2  );
	if ( ! b->exp_yy_ch_buf )
		EXP_YY_FATAL_ERROR( "out of dynamic memory in exp_yy_create_buffer()" );

	b->exp_yy_is_our_buffer = 1;

	exp_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with exp_yy_create_buffer()
 * 
 */
    void exp_yy_delete_buffer (EXP_YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == EXP_YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		EXP_YY_CURRENT_BUFFER_LVALUE = (EXP_YY_BUFFER_STATE) 0;

	if ( b->exp_yy_is_our_buffer )
		exp_yyfree((void *) b->exp_yy_ch_buf  );

	exp_yyfree((void *) b  );
}

#ifndef __cplusplus
// extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a exp_yyrestart() or at EOF.
 */
    static void exp_yy_init_buffer  (EXP_YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	exp_yy_flush_buffer(b );

	b->exp_yy_input_file = file;
	b->exp_yy_fill_buffer = 1;

    /* If b is the current buffer, then exp_yy_init_buffer was _probably_
     * called from exp_yyrestart() or through exp_yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != EXP_YY_CURRENT_BUFFER){
        b->exp_yy_bs_lineno = 1;
        b->exp_yy_bs_column = 0;
    }

        b->exp_yy_is_interactive = file ? (_isatty( _fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, EXP_YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c EXP_YY_CURRENT_BUFFER.
 * 
 */
    void exp_yy_flush_buffer (EXP_YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->exp_yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->exp_yy_ch_buf[0] = EXP_YY_END_OF_BUFFER_CHAR;
	b->exp_yy_ch_buf[1] = EXP_YY_END_OF_BUFFER_CHAR;

	b->exp_yy_buf_pos = &b->exp_yy_ch_buf[0];

	b->exp_yy_at_bol = 1;
	b->exp_yy_buffer_status = EXP_YY_BUFFER_NEW;

	if ( b == EXP_YY_CURRENT_BUFFER )
		exp_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void exp_yypush_buffer_state (EXP_YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	exp_yyensure_buffer_stack();

	/* This block is copied from exp_yy_switch_to_buffer. */
	if ( EXP_YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(exp_yy_c_buf_p) = (exp_yy_hold_char);
		EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_buf_pos = (exp_yy_c_buf_p);
		EXP_YY_CURRENT_BUFFER_LVALUE->exp_yy_n_chars = (exp_yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (EXP_YY_CURRENT_BUFFER)
		(exp_yy_buffer_stack_top)++;
	EXP_YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from exp_yy_switch_to_buffer. */
	exp_yy_load_buffer_state( );
	(exp_yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void exp_yypop_buffer_state (void)
{
    	if (!EXP_YY_CURRENT_BUFFER)
		return;

	exp_yy_delete_buffer(EXP_YY_CURRENT_BUFFER );
	EXP_YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((exp_yy_buffer_stack_top) > 0)
		--(exp_yy_buffer_stack_top);

	if (EXP_YY_CURRENT_BUFFER) {
		exp_yy_load_buffer_state( );
		(exp_yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void exp_yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(exp_yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(exp_yy_buffer_stack) = (struct exp_yy_buffer_state**)exp_yyalloc
								(num_to_alloc * sizeof(struct exp_yy_buffer_state*)
								);
		if ( ! (exp_yy_buffer_stack) )
			EXP_YY_FATAL_ERROR( "out of dynamic memory in exp_yyensure_buffer_stack()" );
								  
		memset((exp_yy_buffer_stack), 0, num_to_alloc * sizeof(struct exp_yy_buffer_state*));
				
		(exp_yy_buffer_stack_max) = num_to_alloc;
		(exp_yy_buffer_stack_top) = 0;
		return;
	}

	if ((exp_yy_buffer_stack_top) >= ((exp_yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (exp_yy_buffer_stack_max) + grow_size;
		(exp_yy_buffer_stack) = (struct exp_yy_buffer_state**)exp_yyrealloc
								((exp_yy_buffer_stack),
								num_to_alloc * sizeof(struct exp_yy_buffer_state*)
								);
		if ( ! (exp_yy_buffer_stack) )
			EXP_YY_FATAL_ERROR( "out of dynamic memory in exp_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((exp_yy_buffer_stack) + (exp_yy_buffer_stack_max), 0, grow_size * sizeof(struct exp_yy_buffer_state*));
		(exp_yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
EXP_YY_BUFFER_STATE exp_yy_scan_buffer  (char * base, exp_yy_size_t  size )
{
	EXP_YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != EXP_YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != EXP_YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (EXP_YY_BUFFER_STATE) exp_yyalloc(sizeof( struct exp_yy_buffer_state )  );
	if ( ! b )
		EXP_YY_FATAL_ERROR( "out of dynamic memory in exp_yy_scan_buffer()" );

	b->exp_yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->exp_yy_buf_pos = b->exp_yy_ch_buf = base;
	b->exp_yy_is_our_buffer = 0;
	b->exp_yy_input_file = 0;
	b->exp_yy_n_chars = b->exp_yy_buf_size;
	b->exp_yy_is_interactive = 0;
	b->exp_yy_at_bol = 1;
	b->exp_yy_fill_buffer = 0;
	b->exp_yy_buffer_status = EXP_YY_BUFFER_NEW;

	exp_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to exp_yylex() will
 * scan from a @e copy of @a str.
 * @param exp_yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       exp_yy_scan_bytes() instead.
 */
EXP_YY_BUFFER_STATE exp_yy_scan_string (exp_yyconst char * exp_yystr )
{
    
	return exp_yy_scan_bytes(exp_yystr,strlen(exp_yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to exp_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
EXP_YY_BUFFER_STATE exp_yy_scan_bytes  (exp_yyconst char * exp_yybytes, int  _exp_yybytes_len )
{
	EXP_YY_BUFFER_STATE b;
	char *buf;
	exp_yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _exp_yybytes_len + 2;
	buf = (char *) exp_yyalloc(n  );
	if ( ! buf )
		EXP_YY_FATAL_ERROR( "out of dynamic memory in exp_yy_scan_bytes()" );

	for ( i = 0; i < _exp_yybytes_len; ++i )
		buf[i] = exp_yybytes[i];

	buf[_exp_yybytes_len] = buf[_exp_yybytes_len+1] = EXP_YY_END_OF_BUFFER_CHAR;

	b = exp_yy_scan_buffer(buf,n );
	if ( ! b )
		EXP_YY_FATAL_ERROR( "bad buffer in exp_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->exp_yy_is_our_buffer = 1;

	return b;
}

#ifndef EXP_YY_EXIT_FAILURE
#define EXP_YY_EXIT_FAILURE 2
#endif

static void exp_yy_fatal_error (exp_yyconst char* msg )
{
    OutputDebugString(std::string(std::string(msg)+"\n").c_str());
	return;
}

/* Redefine exp_yyless() so it works in section 3 code. */

#undef exp_yyless
#define exp_yyless(n) \
	do \
		{ \
		/* Undo effects of setting up exp_yytext. */ \
        int exp_yyless_macro_arg = (n); \
        EXP_YY_LESS_LINENO(exp_yyless_macro_arg);\
		exp_yytext[exp_yyleng] = (exp_yy_hold_char); \
		(exp_yy_c_buf_p) = exp_yytext + exp_yyless_macro_arg; \
		(exp_yy_hold_char) = *(exp_yy_c_buf_p); \
		*(exp_yy_c_buf_p) = '\0'; \
		exp_yyleng = exp_yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int exp_yyget_lineno  (void)
{
        
    return exp_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *exp_yyget_in  (void)
{
        return exp_yyin;
}

/** Get the output stream.
 * 
 */
FILE *exp_yyget_out  (void)
{
        return exp_yyout;
}

/** Get the length of the current token.
 * 
 */
int exp_yyget_leng  (void)
{
        return exp_yyleng;
}

/** Get the current token.
 * 
 */

char *exp_yyget_text  (void)
{
        return exp_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void exp_yyset_lineno (int  line_number )
{
    
    exp_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see exp_yy_switch_to_buffer
 */
void exp_yyset_in (FILE *  in_str )
{
        exp_yyin = in_str ;
}

void exp_yyset_out (FILE *  out_str )
{
        exp_yyout = out_str ;
}

int exp_yyget_debug  (void)
{
        return exp_yy_flex_debug;
}

void exp_yyset_debug (int  bdebug )
{
        exp_yy_flex_debug = bdebug ;
}

static int exp_yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from exp_yylex_destroy(), so don't allocate here.
     */

    (exp_yy_buffer_stack) = 0;
    (exp_yy_buffer_stack_top) = 0;
    (exp_yy_buffer_stack_max) = 0;
    (exp_yy_c_buf_p) = (char *) 0;
    (exp_yy_init) = 0;
    (exp_yy_start) = 0;

/* Defined in main.c */
#ifdef EXP_YY_STDINIT
    exp_yyin = stdin;
    exp_yyout = stdout;
#else
    exp_yyin = (FILE *) 0;
    exp_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * exp_yylex_init()
     */
    return 0;
}

/* exp_yylex_destroy is for both reentrant and non-reentrant scanners. */
int exp_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(EXP_YY_CURRENT_BUFFER){
		exp_yy_delete_buffer(EXP_YY_CURRENT_BUFFER  );
		EXP_YY_CURRENT_BUFFER_LVALUE = NULL;
		exp_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	exp_yyfree((exp_yy_buffer_stack) );
	(exp_yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * exp_yylex() is called, initialization will occur. */
    exp_yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef exp_yytext_ptr
static void exp_yy_flex_strncpy (char* s1, exp_yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef EXP_YY_NEED_STRLEN
static int exp_yy_flex_strlen (exp_yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *exp_yyalloc (exp_yy_size_t  size )
{
	return (void *) malloc( size );
}

void *exp_yyrealloc  (void * ptr, exp_yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void exp_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see exp_yyrealloc() for (char *) cast */
}

#define EXP_YYTABLES_NAME "exp_yytables"

// HERE FOR SAFE KEEPING
// \"[^"\n]*["\n]		{ 
//							if ( strlen(exp_yytext) < 3)
//								exp_yylval.m_string = strdup("");
//							else
//							{
//								exp_yytext[ strlen(exp_yytext)-1 ] = 0;
//								exp_yylval.m_string = strdup(exp_yytext+1);
//							}
//							return STRING;
//						}
						
//[a-zA-Z_][a-zA-Z0-9_]*	{ 
//							exp_yylval.m_string = strdup(exp_yytext);
//							return IDENTIFIER;
//						}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// According to the Bison documentation, the default implementation
// of exp_yywrap() always returns 1. So, that is what we do too :-)
//
int exp_yywrap()  { return 1; }

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE  NOTE
//    The following commentary is more appropo for CmdLexer.
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// 2006.11.26 (PE) -- Introduced this only after much pain & suffering.
// It should be called from exp_yyerror() after processing the error.
// Prior to introducing this function (and for not well understood reasons)
// the parser would puke on a subsequent statement.
//
//    eg. Given the command sequence
//        admin:prepare:          (pass)
//        a^ttrib:headset: .....  (fail, intentional typo)
//        admin:commit:           (fail, lexer in bad state?)
//
// So, now we force the damn thing to be in a decent state.
// NOTE: The failure of admin:commit: may be the reason why the undo buffer
// quits working (as reported by Jonathan McRight).
//
void exp_yyForceRestart()  { exp_yyrestart(exp_yyin ); }

